TODO:

- explore interesting expressions and add them in the default preset
- add config file for default connections setup (mode=mapper.MO_LINEAR, bound_min=mapper.BA_WRAP,
                                       bound_max=mapper.BA_CLAMP)
- supports more than one level hierarchy for signals (ex. /dev1/signal/x)
- possible connection to Zyne synth ? (may have a 'create mapper device' option in Zyne)
- selected/modify connection info (right click, maybe selecting connection line)
- add pure OSC support
- build on Mac
- build on Win
- add a sort of realtime visualization from input/output data (une line simple comme option dans une column, how to insert a line into ctrlList?)
- auto-refresh should list new found devices (hard)
- network interface selection (coded, but doesn't seem to work, needs debug)
- add mute icon
- set increment offset automatically based on current min/max values
- clean code at OnSetSourceMin and AddTreeNodes (avoid duplication)
- refactore code for mapper instances, use only one monitor for everything
- set menubar values when loading a state file
- check links before linking devices
- unlink devices when requested
- draw a red line for linked devices
- add collapse all (added, but wx method doesn't work, needs debug)
- create a logo and make an icon
- make Debian package for pymapper (may change the tool name)
- add class/methods documentation
- add new expression!

- TODAY:

- add option to change connection mode
- fix missing decimals when loading state files
- code search
- define new project name, should be a bit disconnected to libmapper (dmi...)
- update expression field and other parameters once it loads a new state file
- fix double connection in state file OK
- Fix expanding tree elements when there's no device OK
- update to wxpython3 OK (FIX annoying issue with lists)

Recently DONE:

- add menu options for saving/loading state
- add expression presets load/save
- update to new mapper API
- save/load state files
- push it to Debian
- add save as / save current menu
- calibrate ok

